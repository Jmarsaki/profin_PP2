# -*- coding: utf-8 -*-
"""Untitled46.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SBorG-XlxR-SM08csPYF3xl2aiQr2tbw
"""

# ajustar un modelo AR y guardar manualmente los coeficientes en un archivo
import pandas as pd
import numpy as np
from pandas import read_csv
from statsmodels.tsa.ar_model import AutoReg

# crear una transformación de diferencia del conjunto de datos
def difference(dataset):
    diff = list()
    for i in range(1, len(dataset)):
        # Convertir los datos a tipo numérico (float)
        data_value = float(dataset[i]) - float(dataset[i - 1])
        diff.append(data_value)
    return numpy.array(diff)

# cargar conjunto de datos
series = read_csv('/content/drive/MyDrive/Unitsdollars_Excel.csv', header=0, index_col=0, parse_dates=True, squeeze=True)

# Verificar y convertir la columna 'data_value' a tipo numérico si es necesario
series['data_value'] = pd.to_numeric(series['data_value'], errors='coerce')

X = difference(series['data_value'].values)

# modelo de ajuste
window_size = 6
model = AutoReg(X, lags=window_size)
model_fit = model.fit()

# guardar coeficientes
coef = model_fit.params
numpy.save('incremento_model.npy', coef)

# guardar retraso
lag = X[-window_size:]
numpy.save('incremento_data.npy', lag)

# guardar la última ob
numpy.save('incremento_obs.npy', [series['data_value'].values[-1]])

# cargar el modelo guardado manualmente desde el archivo
import numpy
coef = numpy.load('incremento_model.npy')
print(coef)
lag = numpy.load('incremento_data.npy')
print(lag)
last_ob = numpy.load('incremento_obs.npy')
print(last_ob)
# Cargar el modelo guardado manualmente desde el archivo
loaded_coef = np.load('incremento_model.npy')
loaded_lag = np.load('incremento_data.npy')

# Crear un nuevo modelo AR con los coeficientes cargados y el lag
from statsmodels.tsa.ar_model import AutoReg

# Ajustar el valor de maxlag para que sea menor que el número total de observaciones
maxlag = min(2, len(loaded_lag) - 2)  # Puedes ajustar esto según sea necesario
loaded_model = AutoReg(loaded_lag, lags=maxlag)
loaded_model_fit = loaded_model.fit()

# Obtener la predicción para el año 2022
prediction_2022 = loaded_model_fit.predict(start=len(loaded_lag), end=len(loaded_lag))

# Imprimir el resultado
print(last_ob)
print(f"Predicción para el año 2022: {prediction_2022[0]:,.2f}")