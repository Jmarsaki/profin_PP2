# -*- coding: utf-8 -*-
"""Untitled42.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tr6LohOH0ry2iy2dZN846kZuM91FxApR
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor

# Importar la tabla de datos
df = pd.read_csv("/content/drive/MyDrive/Unitsdollars_Excel.csv")

# Agregar una columna con los incrementos totales de los recursos renovables
df["increment"] = df["data_value"].diff(1)

# Agrupar los datos por año y calcular el promedio de los incrementos totales de los recursos renovables
average_increments = df.groupby('year')["increment"].mean()

# Convertir los datos en un arreglo bidimensional
X = average_increments.values.reshape(-1, 1)
y = average_increments.values

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

# Crear el modelo
model = DecisionTreeRegressor()

# Entrenar el modelo
model.fit(X_train, y_train)

# Obtener la precisión del modelo
print(model.score(X_test, y_test))

# Predecir los valores de los incrementos totales de los recursos renovables para 2021 y 2022
predictions = model.predict([[2021], [2022]])

# Imprimir los valores promedios desde 2007 a 2020 incluidos los valores a predecir 2021 y 2022
print("Promedio de incrementos de todos los recursos renovables por año:")
for year, average_increment in zip(df["year"].unique(), average_increments):
    print(f"{year}: {average_increment:,.2f}")
print(f"2021: {predictions[0]:,.2f}")
print(f"2022: {predictions[1]:,.2f}")

# Graficar los incrementos anuales
plt.plot(average_increments.index, average_increments.values, label="Incrementos anuales")
plt.xlabel("Año")
plt.ylabel("Incremento (miles de dólares)")
plt.legend()
plt.show()

# Graficar los datos
plt.plot(average_increments.index, average_increments.values, label="Incrementos anuales")
plt.plot([2021, 2022], predictions, marker="*", color="red", label="Predicciones")
plt.xlabel("Año")
plt.ylabel("Incremento (miles de dólares)")
plt.legend()
plt.show()