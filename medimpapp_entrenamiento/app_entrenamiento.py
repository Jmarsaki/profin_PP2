# -*- coding: utf-8 -*-
"""Untitled44.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PAd85CvN5chTV7q9czsOht9FrEuqCzIX
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor

# Importar la tabla de datos
df = pd.read_csv("/content/drive/MyDrive/Unitsdollars_Excel.csv")

# Agregar una columna con los incrementos totales de los recursos renovables
df["increment"] = df["data_value"].diff(1)

# Agrupar los datos por año y calcular el promedio de los incrementos totales de los recursos renovables
average_increments = df.groupby('year')["increment"].mean()

# Convertir los datos en un arreglo bidimensional
X = average_increments.values.reshape(-1, 1)
y = average_increments.values

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

# Crear el modelo
model = DecisionTreeRegressor()

# Entrenar el modelo
model.fit(X_train, y_train)

# Obtener la precisión del modelo
print(model.score(X_test, y_test))

# Predecir los valores de los incrementos totales de los recursos renovables para 2021 y 2022
predictions = model.predict([[2021], [2022]])

# Imprimir los valores promedios desde 2007 a 2020 incluidos los valores a predecir 2021 y 2022
print("Promedio de incrementos de todos los recursos renovables por año:")
for year, average_increment in zip(df["year"].unique(), average_increments):
    print(f"{year}: {average_increment:,.2f}")
print(f"2021: {predictions[0]:,.2f}")
print(f"2022: {predictions[1]:,.2f}")

def calcular_impacto():
  """
  Calcula el impacto de los incrementos anuales de los códigos según una matriz DAFO.

  Args:
    incrementos: Lista de los incrementos anuales.
    matriz_dafo: Matriz DAFO con valores enteros entre 0 y 5.

  Returns:
    Lista con los valores del impacto de los incrementos.
  """

  # Pedir los incrementos anuales.
  incrementos = input("Introduce los incrementos anuales separados por comas: ").split(",")
  incrementos = [int(incremento) for incremento in incrementos]

  # Pedir los valores de la matriz DAFO.
  matriz_dafo = {}
  for factor in ["Debilidades", "Fortalezas", "Amenazas", "Oportunidades"]:
    valor = input(f"Introduce el valor de la categoría {factor}: ")
    matriz_dafo[factor] = int(valor)

  # Convertir la matriz DAFO a un diccionario.
  matriz_dafo = dict(matriz_dafo)

  # Calcular el impacto de cada incremento.
  impactos = []
  for incremento in incrementos:
    impacto = 0
    for factor in matriz_dafo:
      if factor == "Debilidades":
        impacto -= incremento * matriz_dafo[factor]
      elif factor == "Fortalezas":
        impacto += incremento * matriz_dafo[factor]
      elif factor == "Amenazas":
        impacto -= incremento * matriz_dafo[factor]
      elif factor == "Oportunidades":
        impacto += incremento * matriz_dafo[factor]
    impactos.append(impacto)

  # Imprimir los valores del impacto.
  print(impactos)

  return impactos

impactos = calcular_impacto()